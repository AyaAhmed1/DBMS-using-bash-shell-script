#!/bin/bash

mkdir DBMS 2>> ./.error.log
clear
function createDB {
    data=$(yad --title "Create DataBase" --width 400  --separator="," --geometry="400x200+100+100"   --form --field="DB Name" --button=gtk-ok:0  )
    dbName=$(echo $data | awk 'BEGIN {FS="," } { print $1 }')
      if [[ $dbName == "" ]]
	then
	yad --text "you cant create an empty DB" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
	else
      mkdir ./DBMS/$dbName
      if [[ $? == 0 ]]
      then
            yad --text "Successfully Created" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
      else
              yad --text "The Name Already Exists" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
      fi
fi
Main
  eval exec $cmd
}
function selectDB {
data=$(yad --title "Select DataBase"  --separator="," --geometry="400x200+100+100"   --form --field="DB Name" --button=gtk-ok:0  )
dbName=$(echo $data | awk 'BEGIN {FS="," } { print $1 }')
    cd ./DBMS/$dbName 2>>./.error.log
    if [[ $? == 0 ]]; then
      tableSelection
    else
      yad --text " Not Found" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
    fi
  }

function tableSelection {
  selection=$(yad --geometry="400x100+100+100"  --title "Select DB" --entry  \
      --button="gtk-ok:0" \
     --button="gtk-close:1" \
      --entry-text \
      "Create table" "Insert into table" "Select all from table" "Delete From Table" "Update table" "Alter Table"  "Exit")
      ret=$?
      [[ $ret -eq 1 ]] && exit 0
      if [[ $ret -eq 2 ]]; then
          gdmflexiserver --startnew &
          exit 0
      fi
      case $selection in
          Create*) createTable ;;
          Insert*) insert ;;
          Select*) selectAll ;;
          Delete*)deleteFromTable ;;
          Update*) updateTable ;;
          Alter*) alterTable ;;
          Exit*) exit 1 ;;
          *) exit 1 ;;
      esac
}

function createTable {
    table=$(yad --title "Create Table" --separator="," --geometry="400x200+100+100" --form --field="Table Name" --field="Number of columns" --button=gtk-ok:0  )
    tableName=$(echo $table | awk 'BEGIN {FS="," } { print $1 }')
    colsNum=$(echo $table | awk 'BEGIN {FS="," } { print $2 }')
if [[ ( $tableName == "" ) || ( $colsNum == "" ) ]]
  then
  yad --text "you cant create an empty Table" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
  tableSelection
  else
    if [[ -f $tableName.csv ]]
         then
           yad --text "Table already exsist " --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
           tableSelection
        fi
        counter=1
        sep=","
        rSep="\n"
        pKey=""
        unique=""
        null=""
        defvalue=""
        flag=0
        metaData="Field"$sep"Type"$sep"key"$sep"unique"$sep"null"$sep"default"
         while [ $counter -le $colsNum ]
          do
    if [[ ( $flag -eq 0 ) ]]; then
            many=$(yad --separator="," --geometry="400x200+100+100"  --title="Create Table" --text="Please enter table stracture:" \
              --button=gtk-ok:0 \
               --form \
              --field="Name of Column No.$counter" \
              --field="Type of Column No. $counter":CB \
              --field="Make it a primary key? ":CB \
              --field="Make it Unique? ":CB \
              --field="Accepts Null? ":CB \
              --field="Default value " \
              "" 'Integer!String' 'PK!normal' 'Yes!No' 'Yes!No' ""
              )

    colName=$(echo $many | awk 'BEGIN {FS="," } { print $1 }')
    colType=$(echo $many | awk 'BEGIN {FS="," } { print $2 }')
    pKey=$(echo $many | awk 'BEGIN {FS="," } { print $3 }')
    unique=$(echo $many | awk 'BEGIN {FS="," } { print $4 }')
    null=$(echo $many | awk 'BEGIN {FS="," } { print $5 }')
    defvalue=$(echo $many | awk 'BEGIN {FS="," } { print $6 }')
    if [[ $pKey == "PK" ]]; then
    flag=1;
    fi

    else
    many=$(yad --separator="," --geometry="400x200+100+100"  --title="Create Table" --text="Please enter table stracture:" \
              --button=gtk-ok:0 \
               --form \
              --field="Name of Column No.$counter" \
              --field="Type of Column No. $counter":CB \
              --field="Make it Unique ":CB \
              --field="Accepts Null? ":CB \
              --field="Default value " \
              "" 'Integer!String' 'Yes!No' 'Yes!No' ""
              )

    colName=$(echo $many | awk 'BEGIN {FS="," } { print $1 }')
    colType=$(echo $many | awk 'BEGIN {FS="," } { print $2 }')
    pKey="normal";
    unique=$(echo $many | awk 'BEGIN {FS="," } { print $3 }')
    null=$(echo $many | awk 'BEGIN {FS="," } { print $4 }')
    defvalue=$(echo $many | awk 'BEGIN {FS="," } { print $5 }')
    fi

     if [[ $colType == "Integer" ]]; then
        if [[ $defvalue =~ ^[0-9]*$ ]]; then

    varr=1;
         else
           yad --text "Invalid data type for the default value" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
    createTable
        fi
        else
          if [[ $defvalue =~ ^[a-zA-Z]*$ ]]; then
    varr=1;
    else
     yad --text "Invalid data type for the default value" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
    createTable
        fi
      fi
       metaData+=$rSep$colName$sep$colType$sep$pKey$sep$unique$sep$null$sep$defvalue
                        if [[ $counter == $colsNum ]]; then
                          temp=$temp$colName
                        else
                          temp=$temp$colName$sep
                        fi
                         ((counter++))
                      done
        touch .$tableName
         echo -e $metaData  >> .$tableName
        touch $tableName.csv
         echo -e $temp >> $tableName.csv
         if [[ $? == 0 ]]
         then
           yad --text "Table Created Successfully" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
        tableSelection
         else
           yad --text "Error Creating Table" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
           createTable

         fi
fi
}

function insert {
  select_name=$(yad --separator="," --geometry="400x200+100+100"  --title="Create Table" --text="Please enter table stracture:" \
    --button=gtk-ok:0 \
     --form \
    --field="Enter Table Name"
    )
tableName=$(echo $select_name | awk 'BEGIN {FS="," } { print $1 }')
if ! [[ -f $tableName.csv ]]; then
yad --text "Table $tableName isn't existed" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
tableSelection
fi
colsNum=`awk 'END{print NR}' .$tableName`
sep=","
 rSep="\n"
 row=""
 for (( i = 2; i <= $colsNum; i++ )); do
   colName=$(awk 'BEGIN{FS=","}{ if(NR=='$i') print $1}' .$tableName)
   colType=$( awk 'BEGIN{FS=","}{if(NR=='$i') print $2}' .$tableName)
   colKey=$( awk 'BEGIN{FS=","}{if(NR=='$i') print $3}' .$tableName)
   colUnique=$( awk 'BEGIN{FS=","}{if(NR=='$i') print $4}' .$tableName)
   colNull=$( awk 'BEGIN{FS=","}{if(NR=='$i') print $5}' .$tableName)
   coldef=$( awk 'BEGIN{FS=","}{if(NR=='$i') print $6}' .$tableName)

input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
  --button=gtk-ok:0 \
   --form \
  --field="Enter $colName $colType"
  )
data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
  # Validate Input
  if [[ $colType == "Integer" ]]; then
    while ! [[ $data =~ ^[0-9]*$ ]]; do
      yad --text "invalid input" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
      input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
        --button=gtk-ok:0 \
         --form \
        --field="Enter $colName $colType"
            )
    data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
    done
  fi
  if [[ $colType == "String" ]]; then
    while ! [[ $data =~ ^[a-zA-Z]*$ ]]; do
      yad --text "invalid input" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
      input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
        --button=gtk-ok:0 \
         --form \
        --field="Enter $colName $colType"
            )
    data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
    done
  fi

 if [[ $colKey == "PK" ]]; then
   if [[ $colType == "Integer" ]]; then
     while [[ true ]]; do
       if [[ $data =~ ^[`awk 'BEGIN{FS="," ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' $tableName.csv`]$ ]]; then
         yad --text "invalid input for PrimaryKey" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
       else
         break;
       fi
       input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
         --button=gtk-ok:0 \
          --form \
         --field="Enter $colName $colType"
             )
     data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
     done
fi
  if [[ $colType == "String" ]]; then
while [[ true ]]; do
       if [[ "$data" =~ ^[`awk 'BEGIN{FS="," ; ORS=" "}{if(NR != 1)print "$(('$i'-1))" }' $tableName.csv`]$ ]]; then
         yad --text "invalid input for PrimaryKey" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
       else
         break;
       fi
       input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
         --button=gtk-ok:0 \
          --form \
         --field="Enter $colName $colType"
             )
     data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
     done
   fi
 fi


if [[ $colUnique == "Yes" ]]; then
if [[ $colType == "Integer" ]]; then
while [[ true ]]; do
       if [[ $data =~ ^[`awk 'BEGIN{FS="," ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' $tableName.csv`]$ ]]; then
         yad --text "Not unique" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
       else
         break;
       fi
       input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
         --button=gtk-ok:0 \
          --form \
         --field="Enter $colName $colType"
             )
     data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
     done
fi
  if [[ $colType == "String" ]]; then
 while [[ true ]]; do
  flagg=0;
for eachword in `awk 'BEGIN{FS="," ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' $tableName.csv`; do
 if [[ "$data" == "$eachword" ]]; then
    yad --text "Not unique" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
    flagg=1;
  fi
done
  if [[ $flagg == 1 ]]; then
  input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
         --button=gtk-ok:0 \
          --form \
         --field="Enter $colName $colType"
             )
     data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
  else
  break;
   fi
done
fi
fi

if [[ $colNull == "No" ]]; then
while [[ true ]]; do
  if [[ $data =~ ^$ ]]; then
  yad --text "this field doesn't accept null values" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
  else
    break;
  fi
  input=$(yad --separator="," --geometry="400x200+100+100"  --title="Insert $colName" \
         --button=gtk-ok:0 \
          --form \
         --field="Enter $colName $colType"
             )
     data=$(echo $input | awk 'BEGIN {FS="," } { print $1 }')
done
else
while [[ true ]]; do
  if [[ $data =~ ^$ ]]; then
   data=$coldef
 yad --text "this field  accept null values then the default value will be used" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
    break;
  else
    break;
  fi
done
fi
  if [[ $i == $colsNum ]]; then
    row=$row$data$rSep
  else
    row=$row$data$sep
  fi
done
echo -e $row"\c" >> $tableName.csv
if [[ $? == 0 ]]
then
  yad --text  "Data Inserted Successfully " --geometry="400x100+100+100" --button=gtk-ok:0 --title "Message"

else
    yad --text  "Error" --geometry="400x100+100+100" --button=gtk-ok:0 --title "Message"
fi
row=""
tableSelection
}


function deleteFromTable {
  select_name=$(yad --separator="," --geometry="400x200+100+100"  --title="Delete from Table" \
    --button=gtk-ok:0 \
     --form \
    --field="Enter Table Name"
    )
tableName=$(echo $select_name | awk 'BEGIN {FS="," } { print $1 }')
if ! [[ -f $tableName.csv ]]; then
 yad --text "Table $tableName isn't existed" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
 tableSelection
 fi
options=$(yad --separator="," --geometry="400x200+100+100"  --title="Delete from Table" \
  --button=gtk-ok:0 \
   --form \
  --field="Enter Condition column name" \
  --field="Enter Value to be deleted" \
  --field="enter a regex"
  )
field=$(echo $options | awk 'BEGIN {FS="," } { print $1 }')
reg=$(echo $options | awk 'BEGIN {FS="," } { print $3 }')
val=$(echo $options | awk 'BEGIN {FS="," } { print $2 }')
  fid=$(awk 'BEGIN{FS=","}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$field'") print i}}}' $tableName.csv)
  if [[ $fid == "" ]]
  then
    yad --text  "Field not found" --geometry="400x100+100+100" --button=gtk-ok:0 --title "Message"
    tableSelection
  else
    if [[ $reg == "" ]] #filter by value only 
      then 

      if [[ $val == "" ]]
        then
        yad --text  "Enter a value or a regex to select with" --geometry="400x100+100+100" --button=gtk-ok:0 --title "Message"
    tableSelection
      else
      res=$(awk 'BEGIN{FS=","}{if ($'$fid'=="'$val'") print $'$fid'}' $tableName.csv 2>>./.error.log)
      if [[ $res == "" ]]
      then
        yad --text "Value not found" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
        tableSelection
      else
        NR=$(awk 'BEGIN{FS=","}{if ($'$fid'=="'$val'") print NR}' $tableName.csv 2>>./.error.log)
        sed -i ''$NR'd' $tableName.csv 2>>./.error.log
        yad --text  "Successfully Deleted" --geometry="400x100+100+100" --button=gtk-ok:0 --title "Message"
         tableSelection
      fi
      fi

    else # filter by regex  #
    if [[ $val == "" ]]
        then
      res=$(awk 'BEGIN{FS=","}{if ("$'$fid' ~ $reg") print $"$fid"}' $tableName.csv 2>>./.error.log)
      if [[ $res == "" ]]
      then
        yad --text "Value not found" --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
        tableSelection
      else  
        for x in `awk 'BEGIN{FS="," ; ORS=" "}{if ("$'$fid' ~ $reg") print NF; }' $tableName.csv`; do
        sed -i ''$x'd' $tableName.csv 2>>./.error.log
      done
        yad --text  "Successfully Deleted" --geometry="400x100+100+100" --button=gtk-ok:0 --title "Message"
         tableSelection
      fi
    else
      yad --text  "Enter a value or a regex only to select with" --geometry="400x100+100+100" --button=gtk-ok:0 --title "Message"
    tableSelection
      fi
    fi
  fi
}


function selectAll {
  many=$(yad --separator="," --geometry="400x200+100+100"  --title="Select from Table" --text="Please enter table stracture:" \
              --button=gtk-ok:0 \
               --form \
              --field="Enter the table name" \
              --field="Type of file":CB \
              "" 'CSV!HTML'
              )

    tableName=$(echo $many | awk 'BEGIN {FS="," } { print $1 }')
    filetype=$(echo $many | awk 'BEGIN {FS="," } { print $2 }')
    if [[ ($tableName == "") || ($filetype == "") ]];
      then
      yad --text "Please choose the table name and the file type " --geometry="400x200+100+100" --button=gtk-ok:0 --title "Message"
    else
    if [[ $filetype == "CSV" ]];
      then
      libreoffice $tableName.csv
      tableSelection
    else
      if [[ -f $tableName.html ]]
        then 
        rm -rf $tableName.html
        echo "<html>" >>$tableName.html
      echo "<body>" >>$tableName.html
      awk 'BEGIN {FS="," ; print "<table border solid black 1px>"} {print "<tr>"; for(i=1;i<=NF;i++) print "<td>" $i "</td>"; print "</tr>" } END {print "</table>"}' $tableName.csv >>$tableName.html
      echo "</body>" >>$tableName.html
      echo "</html>" >>$tableName.html
      xdg-open $tableName.html
      tableSelection
      else
      echo "<html>" >>$tableName.html
      echo "<body>" >>$tableName.html
      awk 'BEGIN {FS="," ; print "<table border solid black 1px>"} {print "<tr>"; for(i=1;i<=NF;i++) print "<td>" $i "</td>"; print "</tr>" } END {print "</table>"}' $tableName.csv >>$tableName.html
      echo "</body>" >>$tableName.html
      echo "</html>" >>$tableName.html
      xdg-open $tableName.html
      tableSelection
    fi
    fi
  fi
}

function Main {
  action=$(yad --geometry="400x100+100+100"  --title "DBMS" --entry  \
  --text "Welcome" \
  --text "Options:" \
      --button="gtk-ok:0" \
     --button="gtk-close:1" \
      --entry-text \
      "Create DataBase" "Select DataBase" )
  ret=$?

  [[ $ret -eq 1 ]] && exit 0

  if [[ $ret -eq 2 ]]; then
      gdmflexiserver --startnew &
      exit 0
  fi
  case $action in
      Create*) createDB  ;;
      Select*) selectDB ;;
      Exit*) exit 1  ;;
      *) exit 1 ;;
  esac
  eval exec $cmd
  }
   Main
